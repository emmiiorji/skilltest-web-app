<div class="container">
  <h1>Create Test</h1>

  <div class="form-container">
    <div class="form-div">
      <label for="template">Select Template:</label>
      <select id="template" class="form-control">
        <option value="">-- Select Template --</option>
        {{#each templates}}
          <option value="{{this.id}}">{{this.template}}</option>
        {{/each}}
      </select>
    </div>

    <div class="form-div">
      <label>Template Preview:</label>
      <textarea id="templatePreview" readonly class="form-control" rows="10"></textarea>
    </div>

    <div class="form-div">
      <label for="freelancerInput">Freelancer URL or ID:</label>
      <input type="text" id="freelancerInput" class="form-control" placeholder="abc123 or https://upwork.com/freelancers/~abc123">
      <small>Parsed ID: <span id="parsedId">-</span></small>
    </div>

    <div class="form-div">
      <label for="groupId">Group ID:</label>
      <input type="number" id="groupId" class="form-control" placeholder="123">
    </div>

    <div class="form-div">
      <label>Tracking Configuration:</label>
      <div class="tracking-options">
        <div class="tracking-option">
          <input type="checkbox" id="trackFocusLost" checked>
          <label for="trackFocusLost">Track Focus Lost Events</label>
        </div>
        <div class="tracking-option">
          <input type="checkbox" id="trackMouseClicks" checked>
          <label for="trackMouseClicks">Track Mouse Clicks</label>
        </div>
        <div class="tracking-option">
          <input type="checkbox" id="trackKeyboardPresses" checked>
          <label for="trackKeyboardPresses">Track Keyboard Presses</label>
        </div>
        <div class="tracking-option">
          <input type="checkbox" id="trackDeviceFingerprint" checked>
          <label for="trackDeviceFingerprint">Track Device Fingerprint</label>
        </div>
        <div class="tracking-option">
          <input type="checkbox" id="trackClipboardEvents" checked>
          <label for="trackClipboardEvents">Track Clipboard Events</label>
        </div>
        <div class="tracking-option">
          <input type="checkbox" id="trackAnswerChanges" checked>
          <label for="trackAnswerChanges">Track Answer Changes</label>
        </div>
        <div class="tracking-option">
          <input type="checkbox" id="trackPreSubmitDelay" checked>
          <label for="trackPreSubmitDelay">Track Pre-Submit Delay</label>
        </div>
        <div class="tracking-option">
          <input type="checkbox" id="trackTimeToFirstInteraction" checked>
          <label for="trackTimeToFirstInteraction">Track Time to First Interaction</label>
        </div>
      </div>
    </div>

    <button id="generateBtn" class="btn btn-primary">Generate Test</button>

    <div id="resultContainer" style="display: none; margin-top: 20px;">
      <h3>Generated Message:</h3>
      <div class="alert alert-success">Copied to clipboard!</div>
      <textarea id="generatedMessage" readonly class="form-control" rows="10"></textarea>
      <button id="copyBtn" class="btn btn-secondary mt-2">Copy Again</button>
    </div>
  </div>
</div>

<style>
.tracking-options {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 10px;
  margin-top: 10px;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 5px;
  border: 1px solid #dee2e6;
}

.tracking-option {
  display: flex;
  align-items: center;
  margin-bottom: 5px;
}

.tracking-option input[type="checkbox"] {
  margin-right: 8px;
}

.tracking-option label {
  margin-bottom: 0;
  cursor: pointer;
}

.btn-sm {
  padding: 5px 10px;
  font-size: 0.875rem;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // Add a "Select All" / "Deselect All" toggle for tracking options
  const trackingOptions = document.querySelectorAll('.tracking-option input[type="checkbox"]');
  const trackingContainer = document.querySelector('.tracking-options');

  // Create toggle button
  const toggleButton = document.createElement('button');
  toggleButton.type = 'button';
  toggleButton.className = 'btn btn-sm btn-secondary toggle-tracking';
  toggleButton.textContent = 'Deselect All';
  toggleButton.style.marginBottom = '10px';

  // Insert before the tracking options
  trackingContainer.parentNode.insertBefore(toggleButton, trackingContainer);

  // Toggle functionality
  let allSelected = true;
  toggleButton.addEventListener('click', () => {
    allSelected = !allSelected;
    trackingOptions.forEach(option => {
      option.checked = allSelected;
    });
    toggleButton.textContent = allSelected ? 'Deselect All' : 'Select All';
  });
  const templateSelect = document.getElementById('template');
  const templatePreview = document.getElementById('templatePreview');
  const freelancerInput = document.getElementById('freelancerInput');
  const parsedIdSpan = document.getElementById('parsedId');
  const generateBtn = document.getElementById('generateBtn');
  const resultContainer = document.getElementById('resultContainer');
  const generatedMessage = document.getElementById('generatedMessage');
  const copyBtn = document.getElementById('copyBtn');

  // Template selection
  templateSelect.addEventListener('change', (e) => {
    const selectedOption = e.target.options[e.target.selectedIndex];
    templatePreview.value = selectedOption.value ? selectedOption.text : '';
    updatePreview();
  });

  // Parse freelancer ID
  freelancerInput.addEventListener('input', (e) => {
    let parsed = e.target.value;
    if (e.target.value.includes('upwork.com')) {
      const match = e.target.value.match(/~([a-zA-Z0-9]+)/);
      parsed = match ? match[1] : e.target.value;
    }
    parsedIdSpan.textContent = parsed;
    updatePreview();
  });

  // Update preview with parsed ID
  const updatePreview = () => {
    const template = templatePreview.value;
    const parsedId = parsedIdSpan.textContent;
    if (template && parsedId && parsedId !== '-') {
      templatePreview.value = template.replace(/{link}/g, `[ID: ${parsedId}]`);
    }
  };

  // Generate test
  generateBtn.addEventListener('click', async () => {
    const templateId = templateSelect.value;
    const freelancerInput = document.getElementById('freelancerInput').value;
    const groupId = document.getElementById('groupId').value;

    if (!templateId || !freelancerInput || !groupId) {
      alert('Please fill all fields');
      return;
    }

    try {
      // Collect tracking configuration
      const trackingConfig = {
        disableFocusLostEvents: !document.getElementById('trackFocusLost').checked,
        disableMouseClickEvents: !document.getElementById('trackMouseClicks').checked,
        disableKeyboardPressEvents: !document.getElementById('trackKeyboardPresses').checked,
        disableDeviceFingerprint: !document.getElementById('trackDeviceFingerprint').checked,
        disableClipboardEvents: !document.getElementById('trackClipboardEvents').checked,
        disableAnswerChangeEvents: !document.getElementById('trackAnswerChanges').checked,
        disablePreSubmitDelay: !document.getElementById('trackPreSubmitDelay').checked,
        disableTimeToFirstInteraction: !document.getElementById('trackTimeToFirstInteraction').checked
      };

      const key = '{{key}}'; // Get the key from the template context
      const response = await fetch(`/admin/test/create-link?key=${key}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          template_id: templateId,
          freelancer_input: freelancerInput,
          group_id: groupId,
          tracking_config: trackingConfig
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP error! Status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        generatedMessage.value = data.message;
        resultContainer.style.display = 'block';

        // Copy to clipboard
        navigator.clipboard.writeText(data.message).then(() => {
          document.querySelector('.alert').style.display = 'block';
          setTimeout(() => {
            document.querySelector('.alert').style.display = 'none';
          }, 3000);
        }).catch(error => {
          console.error('Failed to copy to clipboard:', error);
          alert('Generated message is ready but could not be copied to clipboard automatically.');
        });
      } else {
        alert('Error: ' + (data.error || 'Unknown error occurred'));
      }
    } catch (error) {
      alert('Error: ' + error.message);
    }
  });

  // Copy again button
  copyBtn.addEventListener('click', () => {
    navigator.clipboard.writeText(generatedMessage.value).then(() => {
      document.querySelector('.alert').style.display = 'block';
      setTimeout(() => {
        document.querySelector('.alert').style.display = 'none';
      }, 3000);
    }).catch(error => {
      console.error('Failed to copy to clipboard:', error);
      alert('Failed to copy to clipboard. Please try again.');
    });
  });
});
</script>